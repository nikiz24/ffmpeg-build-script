name: Build FFmpeg for macOS

on:
  push:
    branches: [ main, master, 'dev/**' ]
  pull_request:
    branches: [ main, master, 'dev/**' ]
  workflow_dispatch:
    inputs:
      git_branch:
        description: 'Git branch for patches'
        required: false
        default: 'main'
      patch_clone_url:
        description: 'Private repository URL for patches'
        required: false
        default: ''
      ffmpeg_git_url:
        description: 'FFmpeg git repository URL'
        required: false
        default: 'https://github.com/FFmpeg/FFmpeg.git'
      ffmpeg_git_branch:
        description: 'FFmpeg git branch to build'
        required: false
        default: 'release/7.1'

env:
  GIT_BRANCH: ${{ github.event.inputs.git_branch || 'main' }}
  PATCH_CLONE_URL: ${{ github.event.inputs.patch_clone_url || '' }}
  FFMPEG_GIT_URL: ${{ github.event.inputs.ffmpeg_git_url || 'https://github.com/FFmpeg/FFmpeg.git' }}
  FFMPEG_GIT_BRANCH: ${{ github.event.inputs.ffmpeg_git_branch || 'release/7.1' }}

jobs:
  build-x64:
    name: Build x64
    runs-on: macos-12
    strategy:
      matrix:
        include:
          - arch: x64
            target: x86_64-apple-darwin

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        echo "Building for ${{ matrix.arch }}"
        export ARCH=${{ matrix.arch }}
        export MACOSX_DEPLOYMENT_TARGET=11.0

    - name: Install dependencies
      run: |
        brew update
        brew install automake autoconf libtool pkg-config cmake meson ninja nasm yasm

    - name: Build FFmpeg
      run: |
        chmod +x ./build-ffmpeg
        ./build-ffmpeg --build --enable-gpl-and-non-free --auto-install

    - name: Upload x64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-macos-x64
        path: |
          workspace/bin/ffmpeg
          workspace/bin/ffprobe
          workspace/bin/ffplay
        retention-days: 30

  build-arm64:
    name: Build ARM64
    runs-on: macos-12
    strategy:
      matrix:
        include:
          - arch: arm64
            target: aarch64-apple-darwin

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        echo "Building for ${{ matrix.arch }}"
        export ARCH=${{ matrix.arch }}
        export MACOSX_DEPLOYMENT_TARGET=11.0

    - name: Install dependencies
      run: |
        brew update
        brew install automake autoconf libtool pkg-config cmake meson ninja nasm yasm

    - name: Build FFmpeg
      run: |
        chmod +x ./build-ffmpeg
        ./build-ffmpeg --build --enable-gpl-and-non-free --auto-install

    - name: Upload ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-macos-arm64
        path: |
          workspace/bin/ffmpeg
          workspace/bin/ffprobe
          workspace/bin/ffplay
        retention-days: 30

  create-universal:
    name: Create Universal Binary
    runs-on: macos-12
    needs: [build-x64, build-arm64]
    if: always()

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download x64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: ffmpeg-macos-x64
        path: ./x64

    - name: Download ARM64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: ffmpeg-macos-arm64
        path: ./arm64

    - name: Create universal binaries
      run: |
        mkdir -p ./universal/bin
        mkdir -p ./universal/lib
        
        # Create universal ffmpeg
        lipo -create ./x64/ffmpeg ./arm64/ffmpeg -output ./universal/bin/ffmpeg
        
        # Create universal ffprobe
        lipo -create ./x64/ffprobe ./arm64/ffprobe -output ./universal/bin/ffprobe
        
        # Create universal ffplay
        lipo -create ./x64/ffplay ./arm64/ffplay -output ./universal/bin/ffplay
        
        # Copy library files from workspace
        echo "Copying library files..."
        if [[ -d "./x64/workspace/lib" ]]; then
          cp -r ./x64/workspace/lib/* ./universal/lib/ 2>/dev/null || true
        fi
        
        # List library files
        echo "Library files in universal package:"
        find ./universal/lib -name "*.a" -o -name "*.so" -o -name "*.dylib" | head -20
        
        # Verify universal binaries
        echo "Universal binary information:"
        file ./universal/bin/*
        
        # Get FFmpeg version from build system
        FFMPEG_VERSION=$(./ffbuild/ffmpeg/ffbuild/version.sh ffbuild/ffmpeg)
        
        # Create version info
        echo "FFmpeg version:" > ./universal/version.txt
        ./universal/bin/ffmpeg -version | head -n 1 >> ./universal/version.txt
        echo "Build date: $(date)" >> ./universal/version.txt
        echo "Architectures: x86_64, arm64" >> ./universal/version.txt
        echo "Git branch: ${{ env.FFMPEG_GIT_BRANCH }}" >> ./universal/version.txt
        
        # Save version info for later use
        echo "FFMPEG_VERSION=${FFMPEG_VERSION}" >> $GITHUB_ENV
        
        # Show final package structure
        echo "Final package structure:"
        echo "========================"
        tree ./universal || find ./universal -type f | sort
        echo "========================"

    - name: Upload universal artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-macos-universal
        path: ./universal/
        retention-days: 30

    - name: Create release package
      run: |
        # Create tar.gz package with new naming format
        tar -czf ffmpeg-n${{ env.FFMPEG_VERSION }}-macos-universal.tar.gz -C ./universal .
        
        # Create zip package with new naming format
        cd ./universal
        zip -r ../ffmpeg-n${{ env.FFMPEG_VERSION }}-macos-universal.zip .
        cd ..

    - name: Upload release packages
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-macos-packages
        path: |
          ffmpeg-macos-universal-${FFMPEG_VERSION}.tar.gz
          ffmpeg-macos-universal-${FFMPEG_VERSION}.zip
        retention-days: 30

  release:
    name: Create Release
    runs-on: macos-12
    needs: [create-universal]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download universal artifacts
      uses: actions/download-artifact@v4
      with:
        name: ffmpeg-macos-universal
        path: ./universal

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: ffmpeg-macos-packages
        path: ./packages

    - name: List downloaded packages
      run: |
        echo "Available packages:"
        ls -la ./packages/
        echo "Packages for release:"
        find ./packages -name "*.tar.gz" -o -name "*.zip"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: FFmpeg for macOS (Universal)
        body: |
          ## FFmpeg ${{ env.FFMPEG_GIT_BRANCH }} for macOS
          
          Universal binary supporting both Intel (x86_64) and Apple Silicon (ARM64) architectures.
          
          ### Features
          - Universal binary (x86_64 + ARM64)
          - GPL and non-free codecs enabled
          - Optimized for macOS 11.0+
          - Built from git branch: ${{ env.FFMPEG_GIT_BRANCH }}
          
          ### Downloads
          - **Universal Binary**: `ffmpeg-n${{ env.FFMPEG_VERSION }}-macos-universal.tar.gz`
          - **ZIP Package**: `ffmpeg-n${{ env.FFMPEG_VERSION }}-macos-universal.zip`
          
          ### Installation
          Extract the archive and copy the binaries to your PATH:
          ```bash
          tar -xzf ffmpeg-n${{ env.FFMPEG_VERSION }}-macos-universal.tar.gz
          sudo cp bin/* /usr/local/bin/
          ```
          
          ### Build Info
          - FFmpeg branch: ${{ env.FFMPEG_GIT_BRANCH }}
          - Build date: $(date)
          - Supported architectures: x86_64, ARM64
          - macOS target: 11.0+
        files: |
          packages/*.tar.gz
          packages/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
